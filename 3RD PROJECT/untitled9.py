# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kq_ltgj5IoE-ydrXbuQscL1461cGYIJi

**TASK 3**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

sns.set_style("darkgrid")

import pandas as pd

# Load the full dataset
df = pd.read_csv('/content/bank_marketing_cleaned.csv', sep=';')

# View first few rows
df.head()

# Check for nulls
print(df.isnull().sum())

# Encode categorical columns
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
for col in df.select_dtypes(include='object').columns:
    df[col] = le.fit_transform(df[col])

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Step 1: Import libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 2: Load the cleaned dataset
data = pd.read_csv('/content/bank_marketing_cleaned.csv')

# Step 3: Check basic info (optional)
print(data.head())
print(data.info())

from sklearn.preprocessing import LabelEncoder

df = data.copy()
label_enc = LabelEncoder()

for col in df.select_dtypes(include='object').columns:
    df[col] = label_enc.fit_transform(df[col])

plt.figure(figsize=(12, 6))
sns.heatmap(df.corr(), cmap='coolwarm', annot=True)
plt.title("Correlation Matrix (Encoded)")
plt.show()

sns.countplot(x='y', data=data)
plt.title("Target Variable Distribution (y)")
plt.show()

from sklearn.preprocessing import LabelEncoder

# Make a copy of your data
df = data.copy()

# Apply Label Encoding to all object (string) columns
label_enc = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    df[col] = label_enc.fit_transform(df[col])

# Now split features and target
X = df.drop('y', axis=1)
y = df['y']

# Proceed with model
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier(max_depth=5, random_state=42)
model.fit(X_train, y_train)

import matplotlib.pyplot as plt
import pandas as pd

importances = pd.Series(model.feature_importances_, index=X.columns)
importances.nlargest(10).plot(kind='barh', color='orange')
plt.title("Top 10 Feature Importances")
plt.show()